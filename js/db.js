/**\n * Database Configuration and Schema\n * IndexedDB database setup using Dexie.js for Sumanglam Banking Software\n */\n\n// Import Dexie (assuming it's loaded globally)\nconst Dexie = window.Dexie;\n\nif (!Dexie) {\n    throw new Error('Dexie.js library not loaded. Please include dexie.min.js before this script.');\n}\n\n/**\n * Database Schema Definition\n * Defines all tables, indexes, and relationships for the banking system\n */\nconst db = new Dexie('sumanglam-banking-db');\n\ndb.version(1).stores({\n    // Operators table - system users (admin and regular operators)\n    operators: '++id, &username, &aadhaar, isAdmin, isActive, createdAt, lastLogin',\n    \n    // Accounts table - customer accounts with guarantor information\n    accounts: `\n        ++id, \n        &aadhaar, \n        name, \n        dob, \n        address, \n        monthly_salary, \n        guarantor1_aadhaar, \n        guarantor2_aadhaar, \n        isActive, \n        createdAt, \n        createdBy\n    `,\n    \n    // Loans table - loan accounts with EMI and balance tracking\n    loans: `\n        ++id, \n        account_id, \n        principal_amount, \n        interest_rate, \n        tenure_months, \n        emi_amount, \n        outstanding_principal, \n        outstanding_interest, \n        status, \n        disbursement_date, \n        maturity_date, \n        created_by, \n        created_at\n    `,\n    \n    // Loan payments table - EMI payment records\n    loan_payments: `\n        ++id, \n        loan_id, \n        payment_amount, \n        principal_component, \n        interest_component, \n        payment_date, \n        payment_month, \n        is_late, \n        late_fee, \n        operator_id, \n        created_at\n    `,\n    \n    // Fixed deposits table\n    fixed_deposits: `\n        ++id, \n        account_id, \n        principal_amount, \n        interest_rate, \n        tenure_months, \n        maturity_amount, \n        deposit_date, \n        maturity_date, \n        status, \n        auto_renewal, \n        created_by, \n        created_at\n    `,\n    \n    // Recurring deposits table\n    recurring_deposits: `\n        ++id, \n        account_id, \n        monthly_amount, \n        interest_rate, \n        tenure_months, \n        total_collected, \n        maturity_amount, \n        start_date, \n        maturity_date, \n        status, \n        created_by, \n        created_at\n    `,\n    \n    // RD collections table - monthly collection records\n    rd_collections: `\n        ++id, \n        rd_id, \n        collection_amount, \n        collection_date, \n        collection_month, \n        is_late, \n        late_fee, \n        operator_id, \n        created_at\n    `,\n    \n    // System configuration table\n    system_config: `\n        &config_key, \n        config_value, \n        description, \n        updated_by, \n        updated_at\n    `,\n    \n    // Certificates table - generated certificates tracking\n    certificates: `\n        ++id, \n        certificate_type, \n        account_id, \n        reference_id, \n        certificate_number, \n        issue_date, \n        file_path, \n        generated_by, \n        created_at\n    `\n});\n\n/**\n * Note: Database hooks removed for compatibility\n * The hooks were causing 'db.operators.hook is not a function' error\n * Manual timestamp and default value setting is now handled in the UI modules\n */\n\n/**\n * Database Utility Functions\n */\n\n/**\n * Initialize default system configuration\n */\nexport async function initializeSystemConfig() {\n    const existingConfig = await db.system_config.count();\n    \n    if (existingConfig === 0) {\n        const defaultConfig = [\n            { config_key: 'loan_interest_rate', config_value: '12.0', description: 'Default loan interest rate (%)' },\n            { config_key: 'fd_interest_rate_1yr', config_value: '7.5', description: '1 year FD interest rate (%)' },\n            { config_key: 'fd_interest_rate_2yr', config_value: '8.0', description: '2 year FD interest rate (%)' },\n            { config_key: 'fd_interest_rate_3yr', config_value: '8.5', description: '3+ year FD interest rate (%)' },\n            { config_key: 'rd_interest_rate', config_value: '7.0', description: 'RD interest rate (%)' },\n            { config_key: 'max_loan_amount', config_value: '1000000', description: 'Maximum loan amount (₹)' },\n            { config_key: 'retirement_age', config_value: '58', description: 'Retirement age (years)' },\n            { config_key: 'max_loan_tenure_years', config_value: '10', description: 'Maximum loan tenure (years)' },\n            { config_key: 'loan_eligibility_multiplier', config_value: '36', description: 'Loan eligibility multiplier (salary × N)' },\n            { config_key: 'max_emi_percentage', config_value: '50', description: 'Maximum EMI as % of salary' },\n            { config_key: 'min_fd_amount', config_value: '10000', description: 'Minimum FD amount (₹)' },\n            { config_key: 'min_rd_amount', config_value: '1000', description: 'Minimum RD monthly amount (₹)' }\n        ];\n        \n        await db.system_config.bulkAdd(defaultConfig);\n        console.log('Default system configuration initialized');\n    }\n}\n\n/**\n * Get configuration value by key\n */\nexport async function getConfigValue(key, defaultValue = null) {\n    try {\n        const config = await db.system_config.get(key);\n        return config ? config.config_value : defaultValue;\n    } catch (error) {\n        console.error('Error getting config value:', error);\n        return defaultValue;\n    }\n}\n\n/**\n * Set configuration value\n */\nexport async function setConfigValue(key, value, updatedBy = null) {\n    try {\n        await db.system_config.put({\n            config_key: key,\n            config_value: value.toString(),\n            updated_by: updatedBy,\n            updated_at: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('Error setting config value:', error);\n        throw error;\n    }\n}\n\n/**\n * Database health check\n */\nexport async function checkDatabaseHealth() {\n    try {\n        const tables = [\n            'operators', 'accounts', 'loans', 'loan_payments',\n            'fixed_deposits', 'recurring_deposits', 'rd_collections',\n            'system_config', 'certificates'\n        ];\n        \n        const health = {};\n        \n        for (const table of tables) {\n            health[table] = await db[table].count();\n        }\n        \n        return {\n            status: 'healthy',\n            tables: health,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        return {\n            status: 'error',\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\n/**\n * Export database for backup\n */\nexport async function exportDatabase() {\n    try {\n        const data = {\n            operators: await db.operators.toArray(),\n            accounts: await db.accounts.toArray(),\n            loans: await db.loans.toArray(),\n            loan_payments: await db.loan_payments.toArray(),\n            fixed_deposits: await db.fixed_deposits.toArray(),\n            recurring_deposits: await db.recurring_deposits.toArray(),\n            rd_collections: await db.rd_collections.toArray(),\n            system_config: await db.system_config.toArray(),\n            certificates: await db.certificates.toArray(),\n            export_metadata: {\n                timestamp: new Date().toISOString(),\n                version: '1.0',\n                database_name: db.name\n            }\n        };\n        \n        return data;\n    } catch (error) {\n        console.error('Error exporting database:', error);\n        throw error;\n    }\n}\n\n/**\n * Handle database open event - Initialize configuration\n */\ndb.ready(async function() {\n    console.log('Database opened successfully:', db.name);\n    await initializeSystemConfig();\n});\n\n// Export the database instance as default\nexport default db;"